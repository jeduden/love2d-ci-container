# Example GitHub Actions workflow for testing a Love2D game

name: Test Love2D Game

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  test-game:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run game and capture screenshots
        run: |
          mkdir -p screenshots
          docker run --rm \
            -v ${{ github.workspace }}:/game \
            -v ${{ github.workspace }}/screenshots:/output \
            ghcr.io/jeduden/love2d-ci-container:latest \
            /run-and-screenshot.sh
      
      - name: Display test results in summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary = '# ðŸŽ® Test Results\n\n';
            
            // Audio status
            if (fs.existsSync('screenshots/audio-status.txt')) {
              summary += '## ðŸ”Š Audio\n```\n' + fs.readFileSync('screenshots/audio-status.txt', 'utf8') + '\n```\n\n';
            }
            
            // Screenshots  
            const files = fs.readdirSync('screenshots').filter(f => f.endsWith('.png'));
            if (files.length > 0) {
              summary += '## ðŸ“¸ Screenshots\n\n';
              for (const file of files) {
                const content = fs.readFileSync(`screenshots/${file}`);
                summary += `### ${file}\n![${file}](data:image/png;base64,${content.toString('base64')})\n\n`;
              }
            }
            
            await core.summary.addRaw(summary).write();
      
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: game-screenshots
          path: screenshots/
      
      - name: Post screenshots to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const files = fs.readdirSync('screenshots').filter(f => f.endsWith('.png'));
            if (files.length === 0) return;
            
            let comment = '## ðŸŽ® Game Screenshots\n\n';
            for (const file of files) {
              const content = fs.readFileSync(`screenshots/${file}`);
              comment += `### ${file}\n![${file}](data:image/png;base64,${content.toString('base64')})\n\n`;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
