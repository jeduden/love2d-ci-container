name: Test Container

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: love2d-ci:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test container with test game
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/test-game:/game \
            love2d-ci:test
      
      - name: Test screenshot capture
        run: |
          mkdir -p screenshots
          docker run --rm \
            -v ${{ github.workspace }}/test-game:/game \
            -v ${{ github.workspace }}/screenshots:/output \
            love2d-ci:test \
            /run-and-screenshot.sh
      
      - name: Record video of game
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/test-game:/game \
            -v ${{ github.workspace }}/screenshots:/output \
            love2d-ci:test \
            /run-and-record.sh
      
      - name: Verify screenshots were created
        run: |
          echo "Checking for screenshots..."
          ls -lh screenshots/
          test $(ls -1 screenshots/*.png 2>/dev/null | wc -l) -gt 0 || (echo "No screenshots found!" && exit 1)
          echo "Screenshots created successfully!"
          
          if [ -f screenshots/game-recording.mp4 ]; then
            echo "Video recording found!"
            ls -lh screenshots/game-recording.mp4
          fi
      
      - name: Upload screenshots and video
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-game-outputs
          path: screenshots/
          retention-days: 7
      
      - name: Display test results in summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let summary = '# ðŸŽ® Love2D CI Test Results\n\n';
            
            // Video recording
            if (fs.existsSync('screenshots/game-recording.mp4')) {
              const stats = fs.statSync('screenshots/game-recording.mp4');
              const sizeMB = (stats.size / 1024 / 1024).toFixed(2);
              
              summary += '## ðŸŽ¬ Video Recording\n\n';
              summary += 'âœ… Game video captured successfully!\n\n';
              summary += `**File:** game-recording.mp4\n`;
              summary += `**Size:** ${sizeMB} MB\n`;
              summary += `**Duration:** ~3 seconds at 30 FPS\n\n`;
              summary += 'ðŸ“¥ **[Download from Artifacts](#artifacts)** to watch the video\n\n';
              summary += '> The video shows the complete game execution with all visual elements and animations.\n\n';
            }
            
            // Screenshots
            const screenshotDir = 'screenshots';
            if (fs.existsSync(screenshotDir)) {
              const files = fs.readdirSync(screenshotDir).filter(f => f.endsWith('.png')).sort();
              if (files.length > 0) {
                summary += '## ðŸ“¸ Screenshots\n\n';
                summary += `âœ… Captured ${files.length} screenshot(s):\n\n`;
                
                for (const file of files) {
                  const stats = fs.statSync(`${screenshotDir}/${file}`);
                  const sizeKB = (stats.size / 1024).toFixed(1);
                  summary += `- **${file}** (${sizeKB} KB)\n`;
                }
                
                summary += '\nðŸ“¥ **[Download from Artifacts](#artifacts)** to view all screenshots\n\n';
              }
            }
            
            summary += '---\n\n';
            summary += 'ðŸ’¡ **How to view:**\n';
            summary += '1. Scroll to the top of this page\n';
            summary += '2. Find the **Artifacts** section\n';
            summary += '3. Click **test-game-outputs** to download\n';
            summary += '4. Extract and open the video/screenshots\n';
            
            await core.summary.addRaw(summary).write();
      
      - name: Verify LuaJIT is available
        run: |
          docker run --rm love2d-ci:test luajit -v
      
      - name: Verify Luarocks is available
        run: |
          docker run --rm love2d-ci:test luarocks --version
      
      - name: Check image size
        run: |
          docker images love2d-ci:test --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
